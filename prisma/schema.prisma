// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                   @id @default(uuid()) @db.Uuid
  email              String                   @unique()
  password           String?                  @db.VarChar
  emailVerified      DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  role               String                   @default("user")
  status             String                   @default("pending")
  name               String                   @default("")
  username           String                   @unique()
  userProfiles       Profile?
  usersSoftSkills    UsersToSkills[]
  verificationTokens UsersVerificationToken[] @relation("UserVerificationTokens")
}

model Profile {
  id          String                           @id @default(uuid()) @db.Uuid
  age         Int?
  gender      user_profiles_gender_enum?
  profileType user_profiles_profile_type_enum?
  userId      String                           @unique() @db.Uuid
  phoneNumber String?
  deleted     Int                              @default(0)
  status      Int                              @default(1)
  createdAt   DateTime?                        @default(now())
  updatedAt   DateTime?                        @updatedAt
  users       User                             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  notificationsFrom Notification[] @relation("FromUser")
  notificationsTo   Notification[] @relation("ToUser")
  Notification      Notification[]
}

model UsersToSkills {
  id          String    @default(uuid()) @db.Uuid
  userId      String    @default(uuid()) @db.Uuid
  softSkillId String    @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  softSkills  SoftSkill @relation(fields: [softSkillId], references: [id], onDelete: Cascade)
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, softSkillId])
}

model SoftSkill {
  id              String          @id @default(uuid()) @db.Uuid
  name            String          @unique()
  usersSoftSkills UsersToSkills[]
}

model Notification {
  id                          String    @id @default(uuid()) @db.Uuid
  userId                      String?   @db.Uuid
  fromUserId                  String?   @db.Uuid
  notificationMessage         String?
  notificationLink            String?
  userAction                  String    @default("unread")
  expiryDate                  DateTime?
  status                      Boolean?  @default(true)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  userRequestAction           String    @default("no-action")
  systemNotificationReadedBy  String?
  systemNotificationDeletedBy String?
  notificationTypeId          String?   @db.Uuid
  groupId                     String?   @db.Uuid

  notificationType NotificationType? @relation("TypeOfNotification", fields: [notificationTypeId], references: [id])
  fromUser         Profile?          @relation("FromUser", fields: [fromUserId], references: [id])
  toUser           Profile?          @relation("ToUser", fields: [userId], references: [id])
  Profile          Profile?          @relation(fields: [profileId], references: [id])
  profileId        String?           @db.Uuid
}

model NotificationType {
  id                String         @id @default(uuid()) @db.Uuid
  notificationName  String         @unique
  isSystemGenerated Boolean?       @default(false)
  status            Boolean?       @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  notifications     Notification[] @relation("TypeOfNotification")
}

model UsersVerificationToken {
  id           String    @id @default(uuid()) @db.Uuid
  type         String
  submitted_at DateTime  @default(now())
  token        String?
  expire_at    DateTime? @default(now())
  userId       String    @db.Uuid
  user         User      @relation("UserVerificationTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("users_verification_tokens")
}

enum user_profiles_gender_enum {
  male
  female
  other
}

enum user_profiles_profile_type_enum {
  student
  professional
}
